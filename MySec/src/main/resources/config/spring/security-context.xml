<?xml version="1.0" encoding="UTF-8"?>
<beans:beans 
	xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.2.xsd">

	<!-- Sequence 상 이런건 Component로 만들지 않음 -->
	<beans:bean id="customAccessDeniedHandler" class="kr.or.blackpink.security.CustomAccessDeniedHandler"/>
	<beans:bean id="customAuthenticationSuccessHandler" class="kr.or.blackpink.security.CustomAuthenticationSuccessHandler"/>
	<!-- <beans:bean id="customPasswordEncoder" class="kr.or.blackpink.security.CustomPasswordEncoder"/> -->
	
	<!-- 제공되는 패스워드 인코더 사용하기 -->
	<beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<beans:bean id="customUserDetailsService" class="kr.or.blackpink.security.CustomUserDetailsService"/>
	
	<!-- Web 보안 설정 -->
	<!-- 순서가 중요함, 매핑이 겹칠 땐 더 작은 범주의 권한보안설정이 앞으로 가야한다(우선순위 식) -->
	<http auto-config="true" use-expressions="true">
	<!-- url 잡아채기, 권한이 있을 때 통과 -->
		<intercept-url pattern="/fbi/all" access="permitAll" />
		<intercept-url pattern="/fbi/member" access="hasRole('ROLE_MEMBER')" />
		<intercept-url pattern="/fbi/admin" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/fbi/admin2" access="hasRole('ROLE_ADMIN')" />
		<!-- access="hasRole('ROLE_MEMBER')" 멤버 롤을 가지고 있어야 지정된 url패턴에 접근가능하다는 뜻 -->
		
		<!-- 설정한 것 빼고 열기 이게 위로가면 전체가 다 열리는 상태로 아래에 기재된 권한들을 덧씌움 -->
		<intercept-url pattern="/**" access="permitAll" />
		
		
		<access-denied-handler ref="customAccessDeniedHandler" />
		<form-login login-page="/mylogin" authentication-success-handler-ref="customAuthenticationSuccessHandler"  />
		<logout invalidate-session="true" logout-url="/mylogout" delete-cookies="JSESSIONID, remember-me"/> 
		<!-- auto-config:"true" 사용 시에 자동으로 설정됨, 하지만 오토컨픽을 써도 직접 제어하는 편이 좋음 -->
		<!-- 위 두 태그가 있어야 스프링 시큐리티가 기본제공하는 로그인 로그아웃 url의 POST 요청이 핸들됨  -->
		
		<csrf disabled="false"/>
		
		<session-management>
		<concurrency-control max-sessions="1" error-if-maximum-exceeded="false"/>
		</session-management>
		<remember-me data-source-ref="dataSource" token-validity-seconds="259200" />
	</http>

	<!-- 인증 관리자 설정 -->
	<authentication-manager erase-credentials="false">
		<!-- (3). spring security에서 userDetail을 bean으로 만들어 이용할 경우(더 자세한 테이블 다룰 수 있음) -->
		<authentication-provider user-service-ref="customUserDetailsService">


	<!-- (2). JDBC를 이용해 user-service 지정 
		Hikari의 dataSource bean이다(database-context에서 정의함)
		<jdbc-user-service data-source-ref="dataSource" 
							users-by-username-query="select userid,userpw,enabled from mymem where userid = ?"
							authorities-by-username-query="select userid,userauth from myauth where userid = ?"/>
		<password-encoder ref="customPasswordEncoder"/> -->
		<password-encoder ref="bcryptPasswordEncoder" />
		
		 
	<!-- (1). inMemory user-service 등록
			<user-service>
			<user name="johyun" password="{noop}johyun" authorities="ROLE_ADMIN, ROLE_ROZE, ROLE_MEMBER"/>
			<user name="roze" password="{noop}roze" authorities="ROLE_ROZE"/>
			password 인코더가 없으면 null 500 에러 발생(스프링 5부터 필수), 인코딩 관련 설정은 {noop}으로 막을 수 있음
			</user-service> 
			-->
		</authentication-provider>
	</authentication-manager>
</beans:beans>
