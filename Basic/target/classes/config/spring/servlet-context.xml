<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->
	<!-- 웹에 관한 것은 servlet context에 담는다 -->
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<!-- 정적인 리소스들의 경로를 쉽게 찾아갈 수 있도록 매핑하는 설정 -->
	<!-- <resources mapping="/resources/**" location="/resources/" /> -->
	<resources mapping="/css/**" location="/resources/css/" />
	<resources mapping="/js/**" location="/resources/js/" />
	<resources mapping="/img/**" location="/resources/img/" />
	<resources mapping="/ckUpload/**"
		location="/resources/ckUpload/" />
	<resources mapping="/ckeditor/**"
		location="/resources/ckeditor/" />


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- JungSun jungsun = new JungSun(); -->
	<!-- <beans:bean id="jungsun" class="kr.or.basic.domain.JungSun"> JungSun 
		jungsun = new JungSun(Jamba jamba); 생성자 인젝션 : 라이브러리로 가져온 외부 클래스 파일들은 어노테이션으로 
		설정할 수 없으므로 xml이나 java로 직접 등록해야한다. <beans:constructor-arg ref="jamba"/> </beans:bean> -->

	<!-- <beans:bean id="jungsun" class="kr.or.basic.domain.JungSun" init-method="initStart" 
		destroy-method="" scope="" > <beans:property name="jamba" ref="jamba"/> -->
	<!-- 아래 잠바 객체를 참조하는 jungsun 클래스의 jamba 변수 - setJamba -->
	<!--</beans:bean> -->
	<!-- <beans:bean id="jamba" class="kr.or.basic.domain.Jamba"> -->
	<!-- setColor(pink) -->
	<!--<beans:property name="color" value="pink"/> </beans:bean> -->

	<beans:bean id="jungsun2"
		class="kr.or.basic.domain.JungSun2" init-method="initStart"
		destroy-method="" scope="">
		<beans:property name="jamba" ref="jamba" />
	</beans:bean>



	<!-- 꼭 필요한 건 아닌 데 이런 것도 Bean이 된다는 걸 확인 차원에서 -->
	<!-- 이렇게 쓰면 경로를 담은 String 객체를 autowired로 가져다 쓸 수 있다 -->
	<beans:bean id="uploadPath" class="java.lang.String">
		<beans:constructor-arg
			value="C:\Users\PC-13\git\repository_sts\Basic\src\main\webapp\resources\ckUpload" />
		<!-- <beans:constructor-arg value="D:\Tools\apache-tomcat-9.0.60\webapps\Basic\resources\ckUpload" 
			/> -->
		<!-- 아래는 경로를 deploy한 apache tomcat에 맞추어 준 것 -->

	</beans:bean>

	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.support.StandardServletMultipartResolver"></beans:bean>

	<beans:import resource="websocket-context.xml" />

	<!-- 인터셉터 등록법 -->
	<interceptors>
		<interceptor>
			<mapping path="/user/login" />
			<beans:bean
				class="kr.or.basic.interceptor.MyFirstInterceptor" />
		</interceptor>
	</interceptors>
	<!-- task 태그 사용 시 namespace 체크 필요함 -->
	<context:component-scan base-package="kr.or.basic" />
		<task:annotation-driven />
</beans:beans>

